---
import { getCollection, getEntry } from 'astro:content';
const codeEntries = await getCollection('tutorials');
import * as Context from "../content/departments/config.ts";
const departmentEntries = (await Promise.all(Context.slugOrder.map(e => getEntry('departments', e)))).flatMap(f => f ? [f] : []);
import Layout from "../layouts/Layout.astro";
import * as Theme from "../theme.ts";
---
<Layout title="Formula Trinity Autonomous Wiki" includeNavBar={false}>
  <style>
    ul {
      list-style-type: none;
      padding-left: 0px;
    }

    ul li {
      background: var(--gradientStartEvenColor);
      padding-top: 1px;
      padding-bottom: 1px;
    }

    ul li:nth-child(odd) {
      background: var(--gradientStartOddColor);
    }

    ul li a {
      color: var(--foregroundColor); /* Ensure links are white */
      text-decoration: none; /* Remove underlines */
    }

    ul li a:hover {
      color: var(--linkHoverColor); /* Use the new hover color */
    }

    .system-diagram {
      text-align: center;
      margin-top: 2rem;
    }

    .system-diagram object {
      width: 100%;
      max-width: 600px;
    }

    .content-container {
      display: flex;
      justify-content: space-between;
      }

    .right-column {
      flex: 1; /* Adjust the width of the right column */
      max-width: 600px; /* Set a maximum width for better layout */
      padding: 10px;
    }

    .left-column {
      flex: 1;
      margin-right: 20px;
    }


      .slideshow-container {
      position: relative;
      width: 100%;
      max-width: 600px; /* Adjust for a proportional size */
      height: 400px; /* Fixed height */
      margin: auto;
      overflow: hidden;
      border-radius: 12px;
      background: var(--gradientStartOddColor);
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    }

    .slides {
      display: none;
      position: relative;
      height: 100%;
    }


    .slides img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 12px;
  background-color: #000;
}

    .caption {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0, 0, 0, 0.7);
      color: var(--foregroundColor);
      padding: 8px 12px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: bold;
      text-align: center;
      box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4);
    }

    .prev, .next {
      cursor: pointer;
      position: absolute;
      top: 50%;
      width: auto;
      padding: 10px;
      color: var(--foregroundColor);
      font-weight: bold;
      font-size: 18px;
      user-select: none;
      background: rgba(0, 0, 0, 0.6);
      border-radius: 50%;
      transform: translateY(-50%);
    }

    .prev {
      left: 10px;
    }

    .next {
      right: 10px;
    }

    .prev:hover, .next:hover {
      background-color: rgba(0, 0, 0, 0.8);
    }

    .progress-bar {
      position: absolute;
      bottom: 0;
      left: 0;
      height: 4px;
      background-color: var(--linkHoverColor);
      width: 0;
      transition: width 5s linear;
    }
  </style>

  <div class="content-container">
    <div class="left-column">
      <div class="section">
        <div class="section-content">
          <h2>Departments</h2>
          <ul>{departmentEntries.map(e => (<li><a href={`/${e.slug}`}}>{e.data.title}</a></li>))}</ul>
        </div>
      </div>

      <div class="section">
        <div class="section-content">
          <h2>Guides and Tutorials</h2>
          <ul>{codeEntries.map(e => (<li><a href={`/${e.slug}`}}>{e.data.title}</a></li>))}</ul>
        </div>
      </div>
    </div>

    <div class="right-column">
      <div class="section">
        <div class="section-content">
          <h2>Wall of Fame</h2>
          <div class="slideshow-container">
            <div class="slides fade">
              <img src="/images/image1.jpg" alt="Image 1">
              <div class="caption">Caption for Image 1</div>
            </div>
            <div class="slides fade">
              <img src="/images/image2.jpeg" alt="Image 2">
              <div class="caption">Caption for Image 2</div>
            </div>
            <div class="slides fade">
              <img src="/images/image3.jpg" alt="Image 3">
              <div class="caption">Caption for Image 3</div>
            </div>
            <div class="slides fade">
              <img src="/images/image4.jpg" alt="Image 3">
              <div class="caption">Caption for Image 4</div>
            </div>
            <div class="slides fade">
              <img src="/images/image5.jpg" alt="Image 3">
              <div class="caption">Caption for Image 5</div>
            </div>
            <div class="slides fade">
              <img src="/images/image6.jpg" alt="Image 3">
              <div class="caption">Caption for Image 6</div>
            </div>
            <div class="slides fade">
              <img src="/images/image7.jpg" alt="Image 3">
              <div class="caption">Caption for Image 7</div>
            </div>
            <div class="slides fade">
              <img src="/images/image8.jpg" alt="Image 3">
              <div class="caption">Caption for Image 8</div>
            </div>
            <div class="progress-bar"></div>
            <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
            <a class="next" onclick="plusSlides(1)">&#10095;</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="section system-diagram">
    <h2>System Diagram</h2>
    <object type="image/svg+xml" data="/system diagram.svg"></object>
  </div>

  <script>
    let slideIndex = 1;
showSlides(slideIndex);

// Function to navigate to the next or previous slide
function plusSlides(n: number): void {  // Typing 'n' as a number
  showSlides(slideIndex += n);
}

// Function to show the slide at the given index
function showSlides(n: number): void {  // Typing 'n' as a number
  let slides = document.getElementsByClassName("slides") as HTMLCollectionOf<HTMLElement>;  // Cast to HTMLElement to access 'style'
  if (n > slides.length) { slideIndex = 1; }
  if (n < 1) { slideIndex = slides.length; }
  
  for (let i = 0; i < slides.length; i++) {
    // Cast the element to HTMLElement before accessing 'style'
    (slides[i] as HTMLElement).style.display = "none";  
  }

  // Display the active slide
  (slides[slideIndex - 1] as HTMLElement).style.display = "block";
}

// Optional: Autoplay functionality
setInterval(() => {
  plusSlides(1); // Automatically go to the next slide every 5 seconds
}, 5000);

// Optional: Enable keyboard navigation for left and right arrows
document.addEventListener('keydown', (e) => {
  if (e.key === 'ArrowLeft') {
    plusSlides(-1);
  } else if (e.key === 'ArrowRight') {
    plusSlides(1);
  }
});

  </script>
</Layout>
