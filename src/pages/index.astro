---
import { getCollection, getEntry } from 'astro:content';
const codeEntries = await getCollection('tutorials');
import * as Context from "../content/departments/config.ts";
const departmentEntries = (await Promise.all(Context.slugOrder.map(e => getEntry('departments', e)))).flatMap(f => f ? [f] : []);
import Layout from "../layouts/Layout.astro";
import * as Theme from "../theme.ts";
---

<Layout title="Formula Trinity Autonomous Wiki" includeNavBar={false}>
  <style>
    ul {
      list-style-type: none;
      padding-left: 0;
    }

    ul li {
      background: var(--gradientStartEvenColor);
      padding-top: 1px;
      padding-bottom: 1px;
    }

    ul li:nth-child(odd) {
      background: var(--gradientStartOddColor);
    }

    ul li a {
      color: var(--foregroundColor);
      text-decoration: none;
    }

    ul li a:hover {
      color: var(--linkHoverColor);
    }

    .system-diagram {
      text-align: center;
      margin-top: 2rem;
    }

    .system-diagram object {
      width: 100%;
      max-width: 600px;
    }

    .content-container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }

    .right-column {
      flex: 1;
      max-width: 600px;
      padding: 10px;
    }

    .left-column {
      flex: 1;
      margin-right: 20px;
    }

    .slideshow-container {
      position: relative;
      width: 100%;
      max-width: 600px;
      height: 400px;
      margin: auto;
      overflow: hidden;
      border-radius: 12px;
      background: var(--gradientStartOddColor);
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    }

    .slides {
      display: none;
      position: relative;
      height: 100%;
    }

    .slides img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 12px;
    }

    .caption {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0, 0, 0, 0.7);
      color: var(--foregroundColor);
      padding: 8px 12px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: bold;
      text-align: center;
    }

    .prev, .next {
      cursor: pointer;
      position: absolute;
      top: 50%;
      padding: 10px;
      color: var(--foregroundColor);
      font-weight: bold;
      font-size: 18px;
      background: rgba(0, 0, 0, 0.6);
      border-radius: 50%;
      transform: translateY(-50%);
    }

    .prev {
      left: 10px;
    }

    .next {
      right: 10px;
    }

    .prev:hover, .next:hover {
      background-color: rgba(0, 0, 0, 0.8);
    }

    .progress-bar {
      position: absolute;
      bottom: 0;
      left: 0;
      height: 4px;
      background-color: var(--linkHoverColor);
      width: 0;
      transition: width 5s linear;
    }

    .contact-us {
      background-color: var(--gradientStartEvenColor);
      padding: 20px;
      border-radius: 10px;
      margin-top: 30px;
      text-align: center;
    }

    .contact-us h2 {
      font-size: 24px;
      color: var(--foregroundColor);
    }

    .contact-us p {
      color: var(--foregroundColor);
      font-size: 16px;
    }

    .contact-info {
      margin-top: 20px;
      color: var(--foregroundColor);
    }

    .contact-info a {
      color: var(--linkHoverColor);
      text-decoration: none;
    }

    .contact-info a:hover {
      text-decoration: underline;
    }

    @media screen and (max-width: 768px) {
      .content-container {
        flex-direction: column;
      }

      .right-column {
        max-width: none;
        padding: 10px;
      }

      .left-column {
        margin-right: 0;
        padding: 10px;
      }

      .slideshow-container {
        max-width: 100%;
        height: auto;
      }
    }
  </style>

  <div class="content-container">
    <div class="left-column">
      <div class="section">
        <div class="section-content">
          <h2>Departments</h2>
          <ul>
            {departmentEntries.map(e => (
              <li><a href={`/${e.slug}`}>{e.data.title}</a></li>
            ))}
          </ul>
        </div>
      </div>

      <div class="section">
        <div class="section-content">
          <h2>Guides and Tutorials</h2>
          <ul>
            {codeEntries.map(e => (
              <li><a href={`/${e.slug}`}>{e.data.title}</a></li>
            ))}
          </ul>
        </div>
      </div>
    </div>

    <div class="right-column">
      <div class="section">
        <div class="section-content">
          <h2>Wall of Fame</h2>
          <div class="slideshow-container">
            <div class="slides fade">
              <img src="/images/image1.jpg" alt="Image 1">
              <div class="caption">Caption for Image 1</div>
            </div>
            <div class="slides fade">
              <img src="/images/image2.jpeg" alt="Image 2">
              <div class="caption">Caption for Image 2</div>
            </div>
            <div class="slides fade">
              <img src="/images/image3.jpg" alt="Image 3">
              <div class="caption">Caption for Image 3</div>
            </div>
            <div class="slides fade">
              <img src="/images/image4.jpg" alt="Image 4">
              <div class="caption">Caption for Image 4</div>
            </div>
            <div class="slides fade">
              <img src="/images/image5.jpg" alt="Image 5">
              <div class="caption">Caption for Image 5</div>
            </div>
            <div class="slides fade">
              <img src="/images/image6.jpg" alt="Image 6">
              <div class="caption">Caption for Image 6</div>
            </div>
            <div class="slides fade">
              <img src="/images/image7.jpg" alt="Image 7">
              <div class="caption">Caption for Image 7</div>
            </div>
            <div class="slides fade">
              <img src="/images/image8.jpg" alt="Image 8">
              <div class="caption">Caption for Image 8</div>
            </div>
            <div class="progress-bar"></div>
            <a class="prev" onclick="plusSlides(-1)" aria-label="Previous Slide">&#10094;</a>
            <a class="next" onclick="plusSlides(1)" aria-label="Next Slide">&#10095;</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="section system-diagram">
    <h2>System Diagram</h2>
    <object type="image/svg+xml" data="/system diagram.svg"></object>
  </div>

  <script>
    // Explicitly type progressTimer as NodeJS.Timeout | undefined
    let progressTimer: NodeJS.Timeout | undefined;

    let slideIndex: number = 1;

    showSlides(slideIndex);

    // Function to navigate to the next or previous slide
    function plusSlides(n: number): void {
      if (progressTimer) {
        clearTimeout(progressTimer);
      }
      showSlides(slideIndex += n);
    }

    // Function to show the slide at the given index
    function showSlides(n: number): void {
      const slides = document.getElementsByClassName("slides");
      
      // Adjust slide index
      if (n > slides.length) { slideIndex = 1; }
      if (n < 1) { slideIndex = slides.length; }

      // Hide all slides
      for (let i = 0; i < slides.length; i++) {
        const slide = slides[i] as HTMLElement;
        slide.style.display = "none";
      }

      // Show current slide
      const currentSlide = slides[slideIndex - 1] as HTMLElement;
      currentSlide.style.display = "block";

      // Safely check for progress bar
      const progressBar = document.querySelector('.progress-bar') as HTMLElement | null;
      if (progressBar) {
        // Immediately reset width to 0
        progressBar.style.transition = 'none';
        progressBar.style.width = '0%';

        // Trigger reflow to ensure reset happens before transition
        progressBar.offsetHeight;

        // Set up transition for progress bar
        progressBar.style.transition = 'width 5s linear';
        
        // Delay to ensure reset is complete before starting animation
        setTimeout(() => {
          if (progressBar) {
            progressBar.style.width = '100%';
          }
        }, 50);
      }

      // Auto advance slide
      progressTimer = setTimeout(() => {
        showSlides(slideIndex += 1);
      }, 5000);
    }

    // Optional: Pause on hover (recommended for better user experience)
    const slideshowContainer = document.querySelector('.slideshow-container') as HTMLElement | null;
    if (slideshowContainer) {
      slideshowContainer.addEventListener('mouseenter', () => {
        if (progressTimer) {
          clearTimeout(progressTimer);
        }
        
        const progressBar = document.querySelector('.progress-bar') as HTMLElement | null;
        if (progressBar) {
          progressBar.style.animationPlayState = 'paused';
        }
      });

      slideshowContainer.addEventListener('mouseleave', () => {
        showSlides(slideIndex);
      });
    }
</script>
</Layout>
